// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: job.proto

#ifndef PROTOBUF_job_2eproto__INCLUDED
#define PROTOBUF_job_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_job_2eproto();
void protobuf_AssignDesc_job_2eproto();
void protobuf_ShutdownFile_job_2eproto();

class Job;

// ===================================================================

class Job : public ::google::protobuf::Message {
 public:
  Job();
  virtual ~Job();
  
  Job(const Job& from);
  
  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Job& default_instance();
  
  void Swap(Job* other);
  
  // implements Message ----------------------------------------------
  
  Job* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string func = 2;
  inline bool has_func() const;
  inline void clear_func();
  static const int kFuncFieldNumber = 2;
  inline const ::std::string& func() const;
  inline void set_func(const ::std::string& value);
  inline void set_func(const char* value);
  inline void set_func(const char* value, size_t size);
  inline ::std::string* mutable_func();
  inline ::std::string* release_func();
  
  // required int32 param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Job)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_func();
  inline void clear_has_func();
  inline void set_has_param();
  inline void clear_has_param();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* func_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 param_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_job_2eproto();
  friend void protobuf_AssignDesc_job_2eproto();
  friend void protobuf_ShutdownFile_job_2eproto();
  
  void InitAsDefaultInstance();
  static Job* default_instance_;
};
// ===================================================================


// ===================================================================

// Job

// required int32 id = 1;
inline bool Job::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Job::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Job::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Job::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Job::id() const {
  return id_;
}
inline void Job::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string func = 2;
inline bool Job::has_func() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Job::set_has_func() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Job::clear_has_func() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Job::clear_func() {
  if (func_ != &::google::protobuf::internal::kEmptyString) {
    func_->clear();
  }
  clear_has_func();
}
inline const ::std::string& Job::func() const {
  return *func_;
}
inline void Job::set_func(const ::std::string& value) {
  set_has_func();
  if (func_ == &::google::protobuf::internal::kEmptyString) {
    func_ = new ::std::string;
  }
  func_->assign(value);
}
inline void Job::set_func(const char* value) {
  set_has_func();
  if (func_ == &::google::protobuf::internal::kEmptyString) {
    func_ = new ::std::string;
  }
  func_->assign(value);
}
inline void Job::set_func(const char* value, size_t size) {
  set_has_func();
  if (func_ == &::google::protobuf::internal::kEmptyString) {
    func_ = new ::std::string;
  }
  func_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Job::mutable_func() {
  set_has_func();
  if (func_ == &::google::protobuf::internal::kEmptyString) {
    func_ = new ::std::string;
  }
  return func_;
}
inline ::std::string* Job::release_func() {
  clear_has_func();
  if (func_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = func_;
    func_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 param = 3;
inline bool Job::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Job::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Job::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Job::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 Job::param() const {
  return param_;
}
inline void Job::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_job_2eproto__INCLUDED
